// Mocks generated by Mockito 5.4.4 from annotations
// in post_list/test/data/repositories/post_remote_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:core/src/abstractions/base_url.dart' as _i3;
import 'package:core/src/abstractions/http_manager.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpResponse_0<T1> extends _i1.SmartFake
    implements _i2.HttpResponse<T1> {
  _FakeHttpResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BaseUrl].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseUrl extends _i1.Mock implements _i3.BaseUrl {
  MockBaseUrl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get value => (super.noSuchMethod(
        Invocation.getter(#value),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#value),
        ),
      ) as String);
}

/// A class which mocks [HttpManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpManager extends _i1.Mock implements _i2.HttpManager {
  MockHttpManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.HttpResponse<T>> get<T>(
    String? url, {
    Map<String, dynamic>? queryParameters,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {
            #queryParameters: queryParameters,
            #headers: headers,
          },
        ),
        returnValue:
            _i5.Future<_i2.HttpResponse<T>>.value(_FakeHttpResponse_0<T>(
          this,
          Invocation.method(
            #get,
            [url],
            {
              #queryParameters: queryParameters,
              #headers: headers,
            },
          ),
        )),
      ) as _i5.Future<_i2.HttpResponse<T>>);

  @override
  _i5.Future<_i2.HttpResponse<T>> post<T>(
    String? url, {
    dynamic data,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #data: data,
            #headers: headers,
          },
        ),
        returnValue:
            _i5.Future<_i2.HttpResponse<T>>.value(_FakeHttpResponse_0<T>(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #data: data,
              #headers: headers,
            },
          ),
        )),
      ) as _i5.Future<_i2.HttpResponse<T>>);

  @override
  _i5.Future<_i2.HttpResponse<T>> put<T>(
    String? url, {
    dynamic data,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #data: data,
            #headers: headers,
          },
        ),
        returnValue:
            _i5.Future<_i2.HttpResponse<T>>.value(_FakeHttpResponse_0<T>(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #data: data,
              #headers: headers,
            },
          ),
        )),
      ) as _i5.Future<_i2.HttpResponse<T>>);
}

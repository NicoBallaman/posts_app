// Mocks generated by Mockito 5.4.4 from annotations
// in fav_post/test/src/presentation/fav_post_component_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:core/src/abstractions/service_bus.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ServiceBus].
///
/// See the documentation for Mockito's code generation for more information.
class MockServiceBus extends _i1.Mock implements _i2.ServiceBus {
  MockServiceBus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> subscribe({
    required _i2.ServiceBusSubscriber? serviceBusSubscriber,
    required _i2.ServiceBusEvent? event,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [],
          {
            #serviceBusSubscriber: serviceBusSubscriber,
            #event: event,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> unsubscribe({
    required _i2.ServiceBusSubscriber? serviceBusSubscriber,
    required _i2.ServiceBusEvent? event,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #unsubscribe,
          [],
          {
            #serviceBusSubscriber: serviceBusSubscriber,
            #event: event,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> publish<T>({
    required T? data,
    required _i2.ServiceBusEvent? event,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #publish,
          [],
          {
            #data: data,
            #event: event,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
